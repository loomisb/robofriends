{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","useState","setRobots","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uLAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACA,8BAEJA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CACIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHVS,SCMJC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,qBAAKV,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCHI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,Y,MCmDJC,MAjDf,WAAe,MAUiBC,mBAAS,IAV1B,mBAUJlB,EAVI,KAUImB,EAVJ,OAW2BD,mBAAS,IAXpC,mBAWJb,EAXI,KAWSe,EAXT,KAoBfC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAUP,EAAUO,QAC/B,IAEC,IAGUC,EAAiB3B,EAAO4B,QAAO,SAAA5B,GACjC,OAAOA,EAAOP,KAAKoC,cAAcC,SAASzB,EAAYwB,kBAI1D,OAAsB,IAAlB7B,EAAO+B,OACA,yCAGP,sBAAKnC,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAdI,SAAC0B,GACpBZ,EAAeY,EAAMC,OAAOC,UAcxB,cAAC,EAAD,UACA,cAAC,EAAD,CAAUlC,OAAQ2B,UCrCfQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAMjDX,K","file":"static/js/main.18433ff3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n    <div>\r\n        {\r\nrobots.map((user, i) => {\r\n    return (\r\n        <Card key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email} \r\n        />\r\n    );\r\n})\r\n        }\r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input\r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { useState, useEffect } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport './App.css'\r\n// import { robots } from './robots';\r\n\r\nfunction App() {\r\n    // constructor () {\r\n    //     super()\r\n    //     this.state= {\r\n    //         robots: [],\r\n    //         searchfield: ''\r\n    //     }\r\n    // }\r\n\r\n    //Hooks//\r\n    const [robots, setRobots] = useState([])\r\n    const [searchfield, setSearchfield] = useState('')\r\n\r\n// componentDidMount() {\r\n//     fetch('https://jsonplaceholder.typicode.com/users')\r\n//     .then(response=> response.json())\r\n//     .then(users => {this.setState({robots: users})});\r\n// }\r\n\r\n//useEffect//\r\nuseEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => {setRobots(users)});\r\n}, [])\r\n\r\n    const onSearchChange = (event) => {\r\n        setSearchfield(event.target.value)\r\n    }\r\n        const filteredRobots = robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n            \r\n\r\n        if (robots.length === 0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n            <h1 className='f1'>Robofriends</h1>\r\n            <SearchBox searchChange={onSearchChange} />\r\n            <Scroll>\r\n            <CardList robots={filteredRobots}/>\r\n            </Scroll>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n// import {robots} from './robots';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}